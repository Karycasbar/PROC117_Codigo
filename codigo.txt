def predict(text):

    predicted_emotion=""
    predicted_emotion_img_url=""
    
    if  text!="":
        sentence = []
        sentence.append(text)

        sequences = tokenizer.texts_to_sequences(sentence)

        padded = pad_sequences(
            sequences, maxlen=max_length, padding=padding_type, truncating=trunc_type
        )
        testing_padded = np.array(padded)

        predicted_class_label = np.argmax(model.predict(testing_padded), axis=1)        
        print(predicted_class_label)   
        for key, value in emo_code_url.items():
            if value[0]==predicted_class_label:
                predicted_emotion_img_url=value[1]
                predicted_emotion=key
        return predicted_emotion, predicted_emotion_img_url
------------------------------------------------------------------------------------------------------------
$(document).ready(function () {
    $("#display_date").html(display_date)
})
----------------------------------------------------------------------
        let input_data = {
            "text": $("#text").val()
        }
        console.log(input_data) 
-----------------------------------------------------
            type: 'POST',
            url: "/predict-emotion",
            data: JSON.stringify(input_data),
            dataType: "json",
            contentType: 'application/json',
            success: function (result)            
------------------------------------------------------
                // Resultado recibido de Flask ----->JavaScript
                predicted_emotion = result.data.predicted_emotion
                emo_url = result.data.predicted_emotion_img_url
                // Mostrar resultado usando JavaScript----->HTML
                $("#prediction").html(predicted_emotion)
                $('#prediction').css("display", "block");

                $("#emo_img_url").attr('src', emo_url);
                $('#emo_img_url').css("display", "block");                
            },
            //Función error 
            error: function (result) {
                alert(result.responseJSON.message)
            }
--------------------------------------------------------------------------------
        # Respuesta para enviar si input_text está indefinido.
        response = {
                    "status": "error",
                    "message": "¡Por favor, ingresa algún texto para predecir la emoción!"
                  }
        return jsonify(response)       
        
--------------------------------------------------------------------------------------------------
    else:  
        predicted_emotion,predicted_emotion_img_url = predict(input_text)
        
        # Respuesta para enviar si input_text no está indefinido.
        response = {
                    "status": "success",
                    "data": {
                            "predicted_emotion": predicted_emotion,
                            "predicted_emotion_img_url": predicted_emotion_img_url
                            }  
                   }

        # Enviar respuesta.         
        return jsonify(response)       
-----------------------------------------------------------------------------------------------------
          
  
